#!/usr/bin/bash

#### HARDWARE CONFIGURATION
CURRHOSTNAME=`hostname`
HOSTNAME="dgtcentaur"
CONFIG="/boot/config.txt"
SETUP_DIR="/home/pi/DGTCentaurMods"
CMDLINEFILE="/boot/cmdline.txt"
BTPIN="* *"
BTMACHINEINFO="PRETTY_HOSTNAME=PCS-REVII-081500"
BTSERVICE="/etc/systemd/system/bluetooth.target.wants/bluetooth.service"
BTLIBSERVICE="/lib/systemd/system/bluetooth.service"
BTMAIN="/etc/bluetooth/main.conf"
DBUSSERVICE="/etc/systemd/system/dbus-org.bluez.service"
CENTAUR="/home/pi/centaur/"
CENTAUR_ENGINE="/home/pi/centaur/engines"
STOCKFISH="stockfish_pi"
RODENT_REPO="https://github.com/nescitus/rodent-iv.git"
MAIA_REPO="https://github.com/CSSLab/maia-chess.git"
RODENTIV="rodentIV"
MAIA="maia"
FENLOG="/home/pi/centaur/fen.log"

echo -e "Hardware configuration"
echo -e "Backup first"
cp $CONFIG $CONFIG.bak
cp $CMDLINEFILE $CMDLINEFILE.bak

# Enabke SPI bus if not enbaled
echo "::: Checking SPI"
    SPIOFF=`cat $CONFIG | grep  "^#dtparam=spi=on"`
    SPION=`cat $CONFIG | grep  "^dtparam=spi=on"`
    SPI10=`cat $CONFIG | grep  "^dtoverlay=spi1-3cs"`
    if [ -z $SPIOFF ]
    then
        sed -i "s/#dtparam=spi=on/dtparam=spi=on/g" $CONFIG
    else
        if [ ! -z $SPION ]
        then
            sed -i "$ a dtparam=spi=on" $CONFIG
        fi 
    fi    
 
    
    echo -e ":::::: Checking SPI 1.0 bus.\n"
    if [  -z $SPI10 ]
    then
        sed -i "$ a dtoverlay=spi1-3cs" $CONFIG
    fi

echo "::: Checking serial port. "
    UARTOFF=`cat $CONFIG | grep  "^#enable_uart=1"`
    UARTON=`cat $CONFIG | grep  "^enable_uart=1"`
    if [ ! -z $UARTOFF ]
    then
        echo "::: Enabling serial port..."
        sed -i "s/#enable_uart=1.*/enable_uart=1/g" $CONFIG
    else
        if [ -z $UARTON ]
        then
            sed -i "$ a enable_uart=1" $CONFIG
        fi
    fi

    echo -e "::: Disable console on ttyS0\n"
        REPLY=$(sed -r 's/console=serial.*,[0-9]+ //' $CMDLINEFILE)
        echo -e "$REPLY" > $CMDLINEFILE

    # Setting up Bluetooth
    echo -e "::: Setting up bluetooth."
        echo -e "$BTPIN" > /etc/bluetooth/pin.conf
        echo -e "$BTMACHINEINFO" > /etc/machine-info

##### Enable systemd services.
echo -e "Services setup\n"
    systemctl daemon-reload
    systemctl enable rfcomm.service
    systemctl enable centaurmods-web.service
    systemctl enable DGTCentaurMods.service
    systemctl enable ntp

# Update bluetooth service
    if ! grep -q "^#dgtcentaurmod" $BTSERVICE
    then
    echo -e "Updating bluetooth service."
    REPLACE="ExecStart=/usr/libexec/bluetooth/bluetoothd --compat --noplugin=sap,battery"
    REPLACE=$(sed 's/[^a-zA-Z0-9]/\\&/g' <<<"$REPLACE")
    sed -i "s/^ExecStart.*/$REPLACE/g" $BTSERVICE
    sed -i "/^ExecStart.*/a ExecStartPost=\/usr\/bin\/sdptool add SP" $BTSERVICE
    sed -i "$ a #dgtcentaurmod" $BTSERVICE
fi
# Update bluez service with same string
    if ! grep -q "^#dgtcentaurmod" $DBUSSERVICE
    then
    echo -e "Updating $DBUSSERVICE."
    REPLACE="ExecStart=/usr/libexec/bluetooth/bluetoothd --compat --noplugin=sap,battery"
    REPLACE=$(sed 's/[^a-zA-Z0-9]/\\&/g' <<<"$REPLACE")
    sed -i "s/^ExecStart.*/$REPLACE/g" $DBUSSERVICE
    sed -i "/^ExecStart.*/a ExecStartPost=\/usr\/bin\/sdptool add SP" $DBUSSERVICE    
    sed -i "$ a #dgtcentaurmod" $DBUSSERVICE
fi

# Update bluetooth service in /lib/systemd/system/bluetooth.service with same string
    if ! grep -q "^#dgtcentaurmod" $BTLIBSERVICE
    then
    echo -e "Updating $BTLIBSERVICE."
    REPLACE="ExecStart=/usr/libexec/bluetooth/bluetoothd --compat --noplugin=sap,battery"
    REPLACE=$(sed 's/[^a-zA-Z0-9]/\\&/g' <<<"$REPLACE")
    sed -i "s/^ExecStart.*/$REPLACE/g" $BTLIBSERVICE
    sed -i "/^ExecStart.*/a ExecStartPost=\/usr\/bin\/sdptool add SP" $BTLIBSERVICE    
    sed -i "$ a #dgtcentaurmod" $BTLIBSERVICE
fi


# Update main.conf in /etc/bluetooth
    if ! grep -q "^#dgtcentaurmod" $BTMAIN
    then
    echo -e "Updating $BTMAIN."
    sed -i "$ a #dgtcentaurmod" $BTMAIN
    sed -i "/DiscoverableTimeout/s/^# *//" $BTMAIN
    sed -i "/PairableTimeout/s/^# *//" $BTMAIN
    sed -i "$ a JustWorksRepairing=always" $BTMAIN

fi
# add pi to group bluetooth
if [ -z  $(cat /etc/group | grep bluetooth | grep pi) ]
then 
    echo -e "Add pi to group bluetooth"
    usermod -G bluetooth -a pi
fi

# add pi to group lp
if [ -z  $(cat /etc/group | grep lp | grep pi) ]
then 
    echo -e "Add pi to group lp"
    usermod -G lp -a pi
fi

# add two files in systemd to trigger chgroup on bluetooth start
if [ ! -f "/etc/systemd/system/var-run-sdp.path" ]
then
echo -e "Creating  /etc/systemd/system/var-run-sdp.path ."
cat <<EOT > /etc/systemd/system/var-run-sdp.path
[Unit]
Descrption=Monitor /var/run/sdp

[Install]
WantedBy=bluetooth.service

[Path]
PathExists=/var/run/sdp
Unit=var-run-sdp.service
EOT
fi

if [ ! -f "/etc/systemd/system/var-run-sdp.service" ]
then
echo -e "Creating  /etc/systemd/system/var-run-sdp.service ."
cat <<EOT > /etc/systemd/system/var-run-sdp.service
[Unit]
Description=Set permission of /var/run/sdp

[Install]
RequiredBy=var-run-sdp.path

[Service]
Type=simple
ExecStart=sudo /bin/chgrp bluetooth /var/run/sdp
EOT
fi



systemctl enable var-run-sdp.path
systemctl enable var-run-sdp.service
systemctl start var-run-sdp.path

systemctl daemon-reload

# Update rc.local
    cp /etc/rc.local /etc/rc.local.bak
    if grep -q "^exit 0" /etc/rc.local; then sed -i "s/^exit 0.*//g" /etc/rc.local; fi
    if ! grep -q "^#dgtcentaurmod" /etc/rc.local 
    then
    sed -i "$ a	sudo sdptool add SP & \n\
\n\
sudo bluetoothctl <<EOF \n\
power on \n\
agent on \n\
discoverable on \n\
pairable on \n\
EOF" /etc/rc.local
    sed -i "$ a #dgtcentaurmod" /etc/rc.local
    fi

    sed -i "$ a exit 0" /etc/rc.local
    
function update_hostname {
    sed -i "s/$CURRHOSTNAME/$HOSTNAME/g" /etc/hosts
    sed -i "s/$CURRHOSTNAME/$HOSTNAME/g" /etc/hostname
}

# Install Stockfish if in build
echo -e "::: Installing Stockfish engine"
if [[ -e ${SETUP_DIR}/engines/$STOCKFISH ]]
then
    if [[ -d $CENTAUR_ENGINE ]]
    then
        mv ${CENTAUR_ENGINE}/$STOCKFISH ${CENTAUR_ENGINE}/$STOCKFISH.bak
        mv ${SETUP_DIR}/engines/$STOCKFISH $CENTAUR_ENGINE/$STOCKFISH
    else
        mkdir -p $CENTAUR_ENGINE
        mv ${SETUP_DIR}/engines/$STOCKFISH $CENTAUR_ENGINE
    fi
else
    echo -e "Downloading Stockfish..."
    # TODO: find a way to download.
fi
chown -R pi.root $CENTAUR_ENGINE

#Check if fen.log is there
if [ ! -e $FENLOG ]
then
    touch $FENLOG
fi


# Check if pip is installed
if sudo dpkg -l | grep -q python3-pip
then
    echo "::: Pip is installed."
else
    echo "::: Pip not installed. Installing now..."
    sudo apt-get install -y python3-pip
fi

echo -e "::: Installing python packages.\n"
    cd $SETUP_DIR
    pip3 install -r $SETUP_DIR/requirements.txt


function insertMaia {
    if [ ! -d  ${SETUP_DIR}/tmp ]
    then
        mkdir ${SETUP_DIR}/tmp
    fi
    if [ ! -d ${SETUP_DIR}/tmp/maia-chess ]
    then
        git clone --depth 1 $MAIA_REPO ${SETUP_DIR}/tmp/maia-chess;
        if (($? > 0))
            then echo "git clone maia chess failed with $?"
        fi
    fi
    cp -r ${SETUP_DIR}/tmp/maia-chess/maia_weights ${SETUP_DIR}/engines/
    chmod 755 ${SETUP_DIR}/engines/maia
    if [ ! -f ${SETUP_DIR}/engines/maia.uci ]
    then
        cp ${SETUP_DIR}/setup/engines/maia.uci ${SETUP_DIR}/engines/
    fi

}

function insertRodentIV {
    if [ ! -d  ${SETUP_DIR}/tmp ]
    then
        mkdir ${SETUP_DIR}/tmp
    fi
    if [ ! -d ${SETUP_DIR}/tmp/rodent-iv ]
    then
        git clone --depth 1 $RODENT_REPO ${SETUP_DIR}/tmp/rodent-iv;
        if (($? > 0))
            then echo "git clone rodentiv failed with $?"
        fi
    fi
    if [ -f ${SETUP_DIR}/tmp/rodent-iv/personalities/basic.ini ]
    then
        rm ${SETUP_DIR}/tmp/rodent-iv/personalities/basic.ini
    fi
    cp -r ${SETUP_DIR}/tmp/rodent-iv/personalities ${SETUP_DIR}/engines/
    cp -r ${SETUP_DIR}/tmp/rodent-iv/books ${SETUP_DIR}/engines/
    chmod 744 ${SETUP_DIR}/engines/rodentIV
    if [ ! -f ${SETUP_DIR}/engines/rodentIV.uci ] 
    then
        cp ${SETUP_DIR}/setup/engines/rodentIV.uci ${SETUP_DIR}/engines/
    fi
    if [ ! -f ${SETUP_DIR}/engines/personalities/basic.ini ]
    then
        cp ${SETUP_DIR}/setup/engines/basic.ini ${SETUP_DIR}/engines/personalities/
    fi
}

function insertZahak {
    chmod 755 ${SETUP_DIR}/engines/zahak
    if [ ! -f ${SETUP_DIR}/engines/zahak.uci ]
    then
        cp ${SETUP_DIR}/setup/engines/zahak.uci ${SETUP_DIR}/engines/
    fi

}

function add_lichess_key {
CENTAURINI=/home/pi/DGTCentaurMods/config/centaur.ini
read -p "Lichess API token: "
sed -i "s/^api_token.*/api_token = $REPLY/g" $CENTAURINI
}



insertMaia
insertRodentIV
insertZahak

# Setting final permissions
chown -R pi.pi ${SETUP_DIR}
chown -R pi.root $CENTAUR

# Setting up lichess key
#echo -e "\n\n"
#read -p "Do you have a Lichess API token? (y/n): "
#case $REPLY in
#    [Yy]* ) add_lichess_key;;
#    [Nn]* )
#        exit
#        ;;
#    * ) ;;
#esac

update_hostname

exit 0

